---
name: Update Version Tags for Changed Files
on:
  push:
    branches:
    - main

jobs:
  get_tags_to_update:
    runs-on: ubuntu-latest  # windows-latest || macos-latest
    name: Get Tags to Update
    outputs:
      tags: ${{ steps.get_tags_as_json.outputs.tags }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true  # to ensure we get tags
      - name: get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45
        # with:
        #   files_from_source_file: 'auto-tag-dirs.txt'
      - name: analyze changes and tags
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          git tag --list | sort \
            | perl -nE 'chomp; ($t,$v) = ($_ =~ m|(.*)/([^/]*)$|); $x{"$t"} = $v; END{ say "$_/$x{$_}" for keys %x }' \
            > tags.txt
          echo "### TAGS BY UNIQUE PREFIX"
          cat tags.txt

          sed 's|/[^/]*$||' tags.txt | sort -u > tag-prefixes.txt
          echo "### TAG/DIR PREFIXES"
          cat tag-prefixes.txt

          echo "${CHANGED_FILES}" > changed-files.txt
          echo "### CHANGED FILES"
          cat changed-files.txt

          grep -o -f tag-prefixes.txt changed-files.txt > matching-prefixes.txt || true
          echo "### PREFIXES MATCHING CHANGED FILES"
          cat matching-prefixes.txt

          grep -f matching-prefixes.txt tags.txt > tags-to-update.txt || true
          echo "### TAGS TO UPDATE"
          cat tags-to-update.txt

      - name: get tag list as json
        id: get_tags_as_json
        run: |
          JSON_TAGS="$(jq -R -s -c 'split("\n") | del(.[-1])' < tags-to-update.txt)"
          echo "### JSON TAGS: $JSON_TAGS"
          echo "tags=$JSON_TAGS" >> $GITHUB_OUTPUT
  get_tag_version:
    name: Get New Versions for Tag
    runs-on: ubuntu-latest
    needs: get_tags_to_update
    if: ${{ ! startsWith(needs.get_tags_to_update.outputs.tags, '[]') }}
    strategy:
      matrix:
          tag: ${{fromJSON(needs.get_tags_to_update.outputs.tags)}}
    steps:
      - name: output tag and version
        id: get_version
        env:
          TAG: ${{matrix.tag}}
        run: |
          echo "### TAG: $TAG"
          echo "### VERSION: ${TAG##*/}"
          echo "### TAG_BASE: ${TAG%/*}"
          echo "version=${TAG##*/}" >> $GITHUB_OUTPUT
          echo "tag_base=${TAG%/*}" >> $GITHUB_OUTPUT
      - name: bump version
        id: bump_version
        uses: christian-draeger/increment-semantic-version@1.2.3
        with:
          current-version: ${{ steps.get_version.outputs.version }}
          version-fragment: 'patch'
      - name: show what we have
        run: |
          echo "TAG_BASE: ${{ steps.get_version.outputs.tag_base }}"
          echo "NEW_VERSION: ${{ steps.bump_version.outputs.next-version }}"
      - name: create or update tag
        uses: joutvhu/create-tag@v1
        with:
          tag_name: "${{ steps.get_version.outputs.tag_base }}/v${{ steps.bump_version.outputs.next-version }}"
          on_tag_exists: update
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
