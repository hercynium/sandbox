---
name: Update Version
on:
  push:
    branches:
    - main
env:
  CURRENT_VERSION_TOP_LEVEL: 'v2.11.7'

jobs:
  get_tags_to_update:
    runs-on: ubuntu-latest  # windows-latest || macos-latest
    name: Test changed-files
    outputs:
      tags: ${{ steps.get_tags.outputs.tags }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.
          fetch-tags: true  # to ensure we get tags
      - name: get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          files_from_source_file: 'auto-tag-dirs.txt'
      - name: list all changed files
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          echo "### TAGS"
          git tag --list | sort -r > tags.txt
          cat tags.txt

          echo "### TAG PREFIXES"
          git tag --list | sed 's|/[^/]*$||' > tag-prefixes.txt
          cat tag-prefixes.txt

          echo "### CHANGED FILES"
          echo "${CHANGED_FILES}" > changed-files.txt
          cat changed-files.txt

          echo "### PREFIXES MATCHING CHANGED FILES"
          grep -o -f tag-prefixes.txt changed-files.txt > matching-prefixes.txt
          cat matching-prefixes.txt

          echo "### TAGS TO UPDATE"
          grep -m 1 -f matching-prefixes.txt tags.txt > tags-to-update.txt
          cat tags-to-update.txt

      - name: get tags to update
        id: get_tags
        run: |
          echo "tags=$(jq -R -s -c 'split("\n") | del(.[-1])' < tags-to-update.txt)" >> $GITHUB_OUTPUT
  get_tag_version:
    runs-on: ubuntu-latest
    needs: get_tags_to_update
    strategy:
      matrix:
          tag: ${{fromJSON(needs.get_tags_to_update.outputs.tags)}}
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag_base: ${{ steps.get_version.outputs.tag_base }}
    steps:
      - id: get_version
        env:
          TAG: ${{matrix.tag}}
        run: |
          echo "### TAG: $TAG"
          echo "### VERSION: ${TAG##*/}"
          echo "version=${TAG##*/}" >> $GITHUB_OUTPUT
          echo "tag_base=${TAG%/*}" >> $GITHUB_OUTPUT
      - name: Bump release version
        id: bump_version
        uses: christian-draeger/increment-semantic-version@1.2.3
        with:
          current-version: ${{ steps.get_version.outputs.version }}
          version-fragment: 'patch'
      - name: Do something with your bumped release version
        run: |
          echo "NEW_VERSION: ${{ steps.bump_version.outputs.next-version }}"
          echo "TAG_BASE: ${{ steps.get_version.outputs.tag_base }}"
      - name: Create or update major version
        uses: joutvhu/create-tag@v1
        with:
          tag_name: "${{ steps.get_version.outputs.tag_base }}/v${{ steps.bump_version.outputs.next-version }}"
          on_tag_exists: update
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
